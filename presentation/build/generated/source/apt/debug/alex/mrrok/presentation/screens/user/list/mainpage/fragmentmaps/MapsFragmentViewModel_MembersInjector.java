// Generated by Dagger (https://google.github.io/dagger).
package alex.mrrok.presentation.screens.user.list.mainpage.fragmentmaps;

import alex.mrrok.domain.usecases.DataBaseInfoUserCase;
import alex.mrrok.domain.usecases.GeoAllFiltreUseCase;
import alex.mrrok.domain.usecases.GeoIdUseCase;
import alex.mrrok.domain.usecases.UserLocationUseCase;
import dagger.MembersInjector;
import javax.inject.Provider;

public final class MapsFragmentViewModel_MembersInjector
    implements MembersInjector<MapsFragmentViewModel> {
  private final Provider<UserLocationUseCase> locationUseCaseProvider;

  private final Provider<GeoIdUseCase> geoIdUseCaseProvider;

  private final Provider<GeoAllFiltreUseCase> geoAllFiltreUseCaseProvider;

  private final Provider<DataBaseInfoUserCase> dataBaseInfoUserCaseProvider;

  public MapsFragmentViewModel_MembersInjector(
      Provider<UserLocationUseCase> locationUseCaseProvider,
      Provider<GeoIdUseCase> geoIdUseCaseProvider,
      Provider<GeoAllFiltreUseCase> geoAllFiltreUseCaseProvider,
      Provider<DataBaseInfoUserCase> dataBaseInfoUserCaseProvider) {
    this.locationUseCaseProvider = locationUseCaseProvider;
    this.geoIdUseCaseProvider = geoIdUseCaseProvider;
    this.geoAllFiltreUseCaseProvider = geoAllFiltreUseCaseProvider;
    this.dataBaseInfoUserCaseProvider = dataBaseInfoUserCaseProvider;
  }

  public static MembersInjector<MapsFragmentViewModel> create(
      Provider<UserLocationUseCase> locationUseCaseProvider,
      Provider<GeoIdUseCase> geoIdUseCaseProvider,
      Provider<GeoAllFiltreUseCase> geoAllFiltreUseCaseProvider,
      Provider<DataBaseInfoUserCase> dataBaseInfoUserCaseProvider) {
    return new MapsFragmentViewModel_MembersInjector(
        locationUseCaseProvider,
        geoIdUseCaseProvider,
        geoAllFiltreUseCaseProvider,
        dataBaseInfoUserCaseProvider);
  }

  @Override
  public void injectMembers(MapsFragmentViewModel instance) {
    injectLocationUseCase(instance, locationUseCaseProvider.get());
    injectGeoIdUseCase(instance, geoIdUseCaseProvider.get());
    injectGeoAllFiltreUseCase(instance, geoAllFiltreUseCaseProvider.get());
    injectDataBaseInfoUserCase(instance, dataBaseInfoUserCaseProvider.get());
  }

  public static void injectLocationUseCase(
      MapsFragmentViewModel instance, UserLocationUseCase locationUseCase) {
    instance.locationUseCase = locationUseCase;
  }

  public static void injectGeoIdUseCase(MapsFragmentViewModel instance, GeoIdUseCase geoIdUseCase) {
    instance.geoIdUseCase = geoIdUseCase;
  }

  public static void injectGeoAllFiltreUseCase(
      MapsFragmentViewModel instance, GeoAllFiltreUseCase geoAllFiltreUseCase) {
    instance.geoAllFiltreUseCase = geoAllFiltreUseCase;
  }

  public static void injectDataBaseInfoUserCase(
      MapsFragmentViewModel instance, DataBaseInfoUserCase dataBaseInfoUserCase) {
    instance.dataBaseInfoUserCase = dataBaseInfoUserCase;
  }
}
