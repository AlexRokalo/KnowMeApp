// Generated by Dagger (https://google.github.io/dagger).
package alex.mrrok.injection;

import alex.mrrok.data.repository.UserRepositoryImp;
import alex.mrrok.domain.repositories.UserRepository;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class AppModule_ProvideUserRepositoryFactory implements Factory<UserRepository> {
  private final Provider<UserRepositoryImp> userRepositoryProvider;

  public AppModule_ProvideUserRepositoryFactory(
      Provider<UserRepositoryImp> userRepositoryProvider) {
    this.userRepositoryProvider = userRepositoryProvider;
  }

  @Override
  public UserRepository get() {
    return provideInstance(userRepositoryProvider);
  }

  public static UserRepository provideInstance(Provider<UserRepositoryImp> userRepositoryProvider) {
    return proxyProvideUserRepository(userRepositoryProvider.get());
  }

  public static AppModule_ProvideUserRepositoryFactory create(
      Provider<UserRepositoryImp> userRepositoryProvider) {
    return new AppModule_ProvideUserRepositoryFactory(userRepositoryProvider);
  }

  public static UserRepository proxyProvideUserRepository(UserRepositoryImp userRepository) {
    return Preconditions.checkNotNull(
        AppModule.provideUserRepository(userRepository),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
