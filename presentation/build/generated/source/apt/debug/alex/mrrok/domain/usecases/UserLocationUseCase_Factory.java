// Generated by Dagger (https://google.github.io/dagger).
package alex.mrrok.domain.usecases;

import alex.mrrok.domain.executors.PostExecutionThread;
import alex.mrrok.domain.repositories.UserRepository;
import dagger.internal.Factory;
import javax.inject.Provider;

public final class UserLocationUseCase_Factory implements Factory<UserLocationUseCase> {
  private final Provider<PostExecutionThread> postExecutionThreadProvider;

  private final Provider<UserRepository> userRepositoryProvider;

  public UserLocationUseCase_Factory(
      Provider<PostExecutionThread> postExecutionThreadProvider,
      Provider<UserRepository> userRepositoryProvider) {
    this.postExecutionThreadProvider = postExecutionThreadProvider;
    this.userRepositoryProvider = userRepositoryProvider;
  }

  @Override
  public UserLocationUseCase get() {
    return provideInstance(postExecutionThreadProvider, userRepositoryProvider);
  }

  public static UserLocationUseCase provideInstance(
      Provider<PostExecutionThread> postExecutionThreadProvider,
      Provider<UserRepository> userRepositoryProvider) {
    return new UserLocationUseCase(postExecutionThreadProvider.get(), userRepositoryProvider.get());
  }

  public static UserLocationUseCase_Factory create(
      Provider<PostExecutionThread> postExecutionThreadProvider,
      Provider<UserRepository> userRepositoryProvider) {
    return new UserLocationUseCase_Factory(postExecutionThreadProvider, userRepositoryProvider);
  }

  public static UserLocationUseCase newUserLocationUseCase(
      PostExecutionThread postExecutionThread, UserRepository userRepository) {
    return new UserLocationUseCase(postExecutionThread, userRepository);
  }
}
