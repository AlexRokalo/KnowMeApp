// Generated by Dagger (https://google.github.io/dagger).
package alex.mrrok.injection;

import alex.mrrok.data.database.UserInfoDataBase;
import alex.mrrok.data.net.userinfoapi.RestServiceUserInfo;
import alex.mrrok.data.net.userregistrationapi.RestServiceRegistration;
import alex.mrrok.data.net.usetgeolocationapi.RestServiceGeolocation;
import alex.mrrok.data.repository.UserRepositoryImp;
import alex.mrrok.domain.executors.PostExecutionThread;
import alex.mrrok.domain.repositories.UserRepository;
import alex.mrrok.domain.usecases.CreateUserInfoUseCase;
import alex.mrrok.domain.usecases.DataBaseInfoUserCase;
import alex.mrrok.domain.usecases.GeoAllFiltreUseCase;
import alex.mrrok.domain.usecases.GeoIdUseCase;
import alex.mrrok.domain.usecases.GeoSetUserCase;
import alex.mrrok.domain.usecases.LogInUserUseCase;
import alex.mrrok.domain.usecases.RegistrationUserUseCase;
import alex.mrrok.domain.usecases.SearchUseCase;
import alex.mrrok.domain.usecases.UpdataDataUseCase;
import alex.mrrok.domain.usecases.UserDataBaseUseCase;
import alex.mrrok.domain.usecases.UserInfoUseCase;
import alex.mrrok.domain.usecases.UserListUseCase;
import alex.mrrok.domain.usecases.UserLocationUseCase;
import alex.mrrok.domain.usecases.UserPageUseCase;
import alex.mrrok.executor.UIThread;
import alex.mrrok.executor.UIThread_Factory;
import alex.mrrok.presentation.screens.user.list.createuseraccount.CreateUserViewModel;
import alex.mrrok.presentation.screens.user.list.createuseraccount.CreateUserViewModel_MembersInjector;
import alex.mrrok.presentation.screens.user.list.datachangepage.DataChangeViewModel;
import alex.mrrok.presentation.screens.user.list.datachangepage.DataChangeViewModel_MembersInjector;
import alex.mrrok.presentation.screens.user.list.loginpage.LoginPageViewModel;
import alex.mrrok.presentation.screens.user.list.loginpage.LoginPageViewModel_MembersInjector;
import alex.mrrok.presentation.screens.user.list.mainpage.MainPageViewModel;
import alex.mrrok.presentation.screens.user.list.mainpage.fragmentmaps.MapsFragmentViewModel;
import alex.mrrok.presentation.screens.user.list.mainpage.fragmentmaps.MapsFragmentViewModel_MembersInjector;
import alex.mrrok.presentation.screens.user.list.mainpage.fragmentuserlist.UserListFragmentViewModel;
import alex.mrrok.presentation.screens.user.list.mainpage.fragmentuserlist.UserListFragmentViewModel_MembersInjector;
import alex.mrrok.presentation.screens.user.list.mainpage.fragmentuserpage.UserPageFragmentViewModel;
import alex.mrrok.presentation.screens.user.list.mainpage.fragmentuserpage.UserPageFragmentViewModel_MembersInjector;
import alex.mrrok.presentation.screens.user.list.userpage.UserPageViewModel;
import alex.mrrok.presentation.screens.user.list.userpage.UserPageViewModel_MembersInjector;
import android.content.Context;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerAppComponent implements AppComponent {
  private Provider<UIThread> uIThreadProvider;

  private Provider<PostExecutionThread> provideUIThreadProvider;

  private Provider<Context> provideContextProvider;

  private Provider<UserInfoDataBase> provideAppDatabaseProvider;

  private DaggerAppComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  private UserRepositoryImp getUserRepositoryImp() {
    return new UserRepositoryImp(
        new RestServiceRegistration(),
        new RestServiceUserInfo(),
        new RestServiceGeolocation(),
        provideAppDatabaseProvider.get());
  }

  private UserRepository getUserRepository() {
    return AppModule_ProvideUserRepositoryFactory.proxyProvideUserRepository(
        getUserRepositoryImp());
  }

  private LogInUserUseCase getLogInUserUseCase() {
    return new LogInUserUseCase(provideUIThreadProvider.get(), getUserRepository());
  }

  private RegistrationUserUseCase getRegistrationUserUseCase() {
    return new RegistrationUserUseCase(provideUIThreadProvider.get(), getUserRepository());
  }

  private CreateUserInfoUseCase getCreateUserInfoUseCase() {
    return new CreateUserInfoUseCase(provideUIThreadProvider.get(), getUserRepository());
  }

  private GeoSetUserCase getGeoSetUserCase() {
    return new GeoSetUserCase(provideUIThreadProvider.get(), getUserRepository());
  }

  private UserDataBaseUseCase getUserDataBaseUseCase() {
    return new UserDataBaseUseCase(provideUIThreadProvider.get(), getUserRepository());
  }

  private UserPageUseCase getUserPageUseCase() {
    return new UserPageUseCase(provideUIThreadProvider.get(), getUserRepository());
  }

  private DataBaseInfoUserCase getDataBaseInfoUserCase() {
    return new DataBaseInfoUserCase(provideUIThreadProvider.get(), getUserRepository());
  }

  private UserListUseCase getUserListUseCase() {
    return new UserListUseCase(provideUIThreadProvider.get(), getUserRepository());
  }

  private SearchUseCase getSearchUseCase() {
    return new SearchUseCase(provideUIThreadProvider.get(), getUserRepository());
  }

  private UserInfoUseCase getUserInfoUseCase() {
    return new UserInfoUseCase(provideUIThreadProvider.get(), getUserRepository());
  }

  private UpdataDataUseCase getUpdataDataUseCase() {
    return new UpdataDataUseCase(provideUIThreadProvider.get(), getUserRepository());
  }

  private UserLocationUseCase getUserLocationUseCase() {
    return new UserLocationUseCase(provideUIThreadProvider.get(), getUserRepository());
  }

  private GeoIdUseCase getGeoIdUseCase() {
    return new GeoIdUseCase(provideUIThreadProvider.get(), getUserRepository());
  }

  private GeoAllFiltreUseCase getGeoAllFiltreUseCase() {
    return new GeoAllFiltreUseCase(provideUIThreadProvider.get(), getUserRepository());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.uIThreadProvider = DoubleCheck.provider(UIThread_Factory.create());
    this.provideUIThreadProvider =
        DoubleCheck.provider(AppModule_ProvideUIThreadFactory.create(uIThreadProvider));
    this.provideContextProvider =
        DoubleCheck.provider(AppModule_ProvideContextFactory.create(builder.appModule));
    this.provideAppDatabaseProvider =
        DoubleCheck.provider(AppModule_ProvideAppDatabaseFactory.create(provideContextProvider));
  }

  @Override
  public void inject(LoginPageViewModel loginPageViewModel) {
    injectLoginPageViewModel(loginPageViewModel);
  }

  @Override
  public void inject(CreateUserViewModel createUserViewModel) {
    injectCreateUserViewModel(createUserViewModel);
  }

  @Override
  public void inject(MainPageViewModel mainPageViewModel) {}

  @Override
  public void inject(UserPageViewModel userPageViewModel) {
    injectUserPageViewModel(userPageViewModel);
  }

  @Override
  public void inject(UserPageFragmentViewModel userPageFragmentViewModel) {
    injectUserPageFragmentViewModel(userPageFragmentViewModel);
  }

  @Override
  public void inject(UserListFragmentViewModel userListFragmentViewModel) {
    injectUserListFragmentViewModel(userListFragmentViewModel);
  }

  @Override
  public void inject(DataChangeViewModel dataChangeViewModel) {
    injectDataChangeViewModel(dataChangeViewModel);
  }

  @Override
  public void inject(MapsFragmentViewModel mapsFragmentViewModel) {
    injectMapsFragmentViewModel(mapsFragmentViewModel);
  }

  private LoginPageViewModel injectLoginPageViewModel(LoginPageViewModel instance) {
    LoginPageViewModel_MembersInjector.injectLogInUserUseCase(instance, getLogInUserUseCase());
    return instance;
  }

  private CreateUserViewModel injectCreateUserViewModel(CreateUserViewModel instance) {
    CreateUserViewModel_MembersInjector.injectRegistrationUserUseCase(
        instance, getRegistrationUserUseCase());
    CreateUserViewModel_MembersInjector.injectCreateUserInfoUseCase(
        instance, getCreateUserInfoUseCase());
    CreateUserViewModel_MembersInjector.injectGeoSetUserCase(instance, getGeoSetUserCase());
    CreateUserViewModel_MembersInjector.injectDataBase(instance, getUserDataBaseUseCase());
    return instance;
  }

  private UserPageViewModel injectUserPageViewModel(UserPageViewModel instance) {
    UserPageViewModel_MembersInjector.injectUserPageUseCase(instance, getUserPageUseCase());
    return instance;
  }

  private UserPageFragmentViewModel injectUserPageFragmentViewModel(
      UserPageFragmentViewModel instance) {
    UserPageFragmentViewModel_MembersInjector.injectUserPageUseCase(instance, getUserPageUseCase());
    UserPageFragmentViewModel_MembersInjector.injectDataBaseInfoUserCase(
        instance, getDataBaseInfoUserCase());
    return instance;
  }

  private UserListFragmentViewModel injectUserListFragmentViewModel(
      UserListFragmentViewModel instance) {
    UserListFragmentViewModel_MembersInjector.injectUserListUseCase(instance, getUserListUseCase());
    UserListFragmentViewModel_MembersInjector.injectSearchUseCase(instance, getSearchUseCase());
    return instance;
  }

  private DataChangeViewModel injectDataChangeViewModel(DataChangeViewModel instance) {
    DataChangeViewModel_MembersInjector.injectUserPageUseCase(instance, getUserPageUseCase());
    DataChangeViewModel_MembersInjector.injectUserInfoUseCase(instance, getUserInfoUseCase());
    DataChangeViewModel_MembersInjector.injectUpdataDataUseCase(instance, getUpdataDataUseCase());
    return instance;
  }

  private MapsFragmentViewModel injectMapsFragmentViewModel(MapsFragmentViewModel instance) {
    MapsFragmentViewModel_MembersInjector.injectLocationUseCase(instance, getUserLocationUseCase());
    MapsFragmentViewModel_MembersInjector.injectGeoIdUseCase(instance, getGeoIdUseCase());
    MapsFragmentViewModel_MembersInjector.injectGeoAllFiltreUseCase(
        instance, getGeoAllFiltreUseCase());
    MapsFragmentViewModel_MembersInjector.injectDataBaseInfoUserCase(
        instance, getDataBaseInfoUserCase());
    return instance;
  }

  public static final class Builder {
    private AppModule appModule;

    private Builder() {}

    public AppComponent build() {
      if (appModule == null) {
        throw new IllegalStateException(AppModule.class.getCanonicalName() + " must be set");
      }
      return new DaggerAppComponent(this);
    }

    public Builder appModule(AppModule appModule) {
      this.appModule = Preconditions.checkNotNull(appModule);
      return this;
    }
  }
}
