// Generated by Dagger (https://google.github.io/dagger).
package alex.mrrok.injection;

import alex.mrrok.domain.executors.PostExecutionThread;
import alex.mrrok.executor.UIThread;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class AppModule_ProvideUIThreadFactory implements Factory<PostExecutionThread> {
  private final Provider<UIThread> uiThreadProvider;

  public AppModule_ProvideUIThreadFactory(Provider<UIThread> uiThreadProvider) {
    this.uiThreadProvider = uiThreadProvider;
  }

  @Override
  public PostExecutionThread get() {
    return provideInstance(uiThreadProvider);
  }

  public static PostExecutionThread provideInstance(Provider<UIThread> uiThreadProvider) {
    return proxyProvideUIThread(uiThreadProvider.get());
  }

  public static AppModule_ProvideUIThreadFactory create(Provider<UIThread> uiThreadProvider) {
    return new AppModule_ProvideUIThreadFactory(uiThreadProvider);
  }

  public static PostExecutionThread proxyProvideUIThread(UIThread uiThread) {
    return Preconditions.checkNotNull(
        AppModule.provideUIThread(uiThread),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
