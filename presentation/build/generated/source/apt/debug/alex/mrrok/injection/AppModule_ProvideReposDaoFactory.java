// Generated by Dagger (https://google.github.io/dagger).
package alex.mrrok.injection;

import alex.mrrok.data.database.UserInfoDataBase;
import alex.mrrok.data.database.dao.DaoContract;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class AppModule_ProvideReposDaoFactory implements Factory<DaoContract> {
  private final Provider<UserInfoDataBase> appDatabaseProvider;

  public AppModule_ProvideReposDaoFactory(Provider<UserInfoDataBase> appDatabaseProvider) {
    this.appDatabaseProvider = appDatabaseProvider;
  }

  @Override
  public DaoContract get() {
    return provideInstance(appDatabaseProvider);
  }

  public static DaoContract provideInstance(Provider<UserInfoDataBase> appDatabaseProvider) {
    return proxyProvideReposDao(appDatabaseProvider.get());
  }

  public static AppModule_ProvideReposDaoFactory create(
      Provider<UserInfoDataBase> appDatabaseProvider) {
    return new AppModule_ProvideReposDaoFactory(appDatabaseProvider);
  }

  public static DaoContract proxyProvideReposDao(UserInfoDataBase appDatabase) {
    return Preconditions.checkNotNull(
        AppModule.provideReposDao(appDatabase),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
