// Generated by Dagger (https://google.github.io/dagger).
package alex.mrrok.presentation.screens.user.list.datachangepage;

import alex.mrrok.domain.usecases.UpdataDataUseCase;
import alex.mrrok.domain.usecases.UserInfoUseCase;
import alex.mrrok.domain.usecases.UserPageUseCase;
import dagger.MembersInjector;
import javax.inject.Provider;

public final class DataChangeViewModel_MembersInjector
    implements MembersInjector<DataChangeViewModel> {
  private final Provider<UserPageUseCase> userPageUseCaseProvider;

  private final Provider<UserInfoUseCase> userInfoUseCaseProvider;

  private final Provider<UpdataDataUseCase> updataDataUseCaseProvider;

  public DataChangeViewModel_MembersInjector(
      Provider<UserPageUseCase> userPageUseCaseProvider,
      Provider<UserInfoUseCase> userInfoUseCaseProvider,
      Provider<UpdataDataUseCase> updataDataUseCaseProvider) {
    this.userPageUseCaseProvider = userPageUseCaseProvider;
    this.userInfoUseCaseProvider = userInfoUseCaseProvider;
    this.updataDataUseCaseProvider = updataDataUseCaseProvider;
  }

  public static MembersInjector<DataChangeViewModel> create(
      Provider<UserPageUseCase> userPageUseCaseProvider,
      Provider<UserInfoUseCase> userInfoUseCaseProvider,
      Provider<UpdataDataUseCase> updataDataUseCaseProvider) {
    return new DataChangeViewModel_MembersInjector(
        userPageUseCaseProvider, userInfoUseCaseProvider, updataDataUseCaseProvider);
  }

  @Override
  public void injectMembers(DataChangeViewModel instance) {
    injectUserPageUseCase(instance, userPageUseCaseProvider.get());
    injectUserInfoUseCase(instance, userInfoUseCaseProvider.get());
    injectUpdataDataUseCase(instance, updataDataUseCaseProvider.get());
  }

  public static void injectUserPageUseCase(
      DataChangeViewModel instance, UserPageUseCase userPageUseCase) {
    instance.userPageUseCase = userPageUseCase;
  }

  public static void injectUserInfoUseCase(
      DataChangeViewModel instance, UserInfoUseCase userInfoUseCase) {
    instance.userInfoUseCase = userInfoUseCase;
  }

  public static void injectUpdataDataUseCase(
      DataChangeViewModel instance, UpdataDataUseCase updataDataUseCase) {
    instance.updataDataUseCase = updataDataUseCase;
  }
}
